= Background =

Role: Data jobs, NLP Admin
Kernel: 2.6.18-416.el5 #1 SMP
Architecture: x86_64
Contains: mysqld, httpd, unijob client, vsftpd

VmWare:
- CPU: 8
- RAM: 64
- Disks: 4
 * boot: 8.5 GB
    * swap 8.4GB
 * root: 59 GB
 * fio: 300 GB
 * cars-data: 500 GB

SMS migration time:
 - 6hr15min

AWS EC2 Instance:
- type: r4.2xlarge (update to r4.4xlarge if issues arise)
- ENA: no (RHEL5 too old)


== Storyboard: Create clone of VmWare instance ==

[x] Login to VmWare console

[x] Navigate to ncspral20

[x] Launch ncspral20 KVM console

[x] SSH into the ncspral20

[x] Reboot the machine to have it perform disk checks
{{{
sudo /sbin/reboot
}}}

[x] Stop ncspral20 VmWare instance
{{{
sudo /sbin/shutdown -h now
}}}

[x] Make sure ncspral20 VmWare instance is stopped

[x] Disconnect all NICs on ncspral20

== Storyboard: Silence Nagios checks ==

[x] Acknowledge ncspral20 host + services alerts

[x] Acknowledge ncspral23/24 admin repl alerts


== Storyboard: Clone ncspral20 ==

[x] Clone ncspral20 VmWare instance to ncspral20-aws-clone
  - place it in Cars-SM/AWS migration
  - Use Newcars Hosts
  - Use data store with sufficient amount of disk

[x] Disable all NIC interfaces on VmWare ncspral20-aws-clone instance

[x] Start up ncspral20-aws-clone VmWare instance

[x] Login to ncspral20-aws-clone via VmWare KVM console


== Storyboard: Remove Swap ==

[x] Check that there is swap partition
{{{
/sbin/swapon -s
}}}

[x] Comment out `LABEL=SWAP-sda2		swap		swap		defaults		0 0` in `/etc/fstab`

[x] Reboot machine

[x] Check that there is no swap partition
{{{
/sbin/swapon -s
}}}

== Storyboard: Disable services ==

Note: done to prevent services from being active until we want them to be

[x] Disable anacron service
{{{
sudo /sbin/chkconfig --list anacron
sudo /sbin/chkconfig --level 2345 anacron off
sudo /sbin/chkconfig --list anacron | grep ":on"
}}}

[x] Disable crond service
{{{
sudo /sbin/chkconfig --list crond
sudo /sbin/chkconfig --level 2345 crond off
sudo /sbin/chkconfig --list crond | grep ":on"
}}}

[x] Disable httpd service
{{{
sudo /sbin/chkconfig --list httpd
sudo /sbin/chkconfig --level 235 httpd off
sudo /sbin/chkconfig --list httpd | grep ":on"
}}}

[x] Disable mysql service
{{{
sudo emacs /etc/rc.local
}}}

comment out
{{{
/etc/init.d/mysqld start
}}}

[x] Disable Netbackup client service
{{{
sudo /sbin/chkconfig --list nbclient
sudo /sbin/chkconfig --level 235 nbclient off
sudo /sbin/chkconfig --list nbclient | grep ":on"
}}}

[x] Disable Nagios NRPE client service
{{{
sudo /sbin/chkconfig --list nrpe
sudo /sbin/chkconfig --level 345 nrpe off
sudo /sbin/chkconfig --list nrpe | grep ":on"
}}}

[x] Disable sendmail service
{{{
sudo /sbin/chkconfig --list sendmail
sudo /sbin/chkconfig --level 2345 sendmail off
sudo /sbin/chkconfig --list sendmail | grep ":on"
}}}

[x] Disable unijob service
{{{
sudo /sbin/chkconfig --list unijob
sudo /sbin/chkconfig --level 2345 unijob off
sudo /sbin/chkconfig --list unijob | grep ":on"
}}}


[x] Restart server
{{{
sudo /sbin/reboot
}}}

[x] Run spot checks post reboot
{{{
ps auxw | grep anacron
ps auxw | grep crond
ps auxw | grep httpd
ps auxw | grep mysql
ps auxw | grep nbclient
ps auxw | grep nrpe
ps auxw | grep sendmail
ps auxw | grep UNIJOB
}}}

[x] Shutdown the clone machine
{{{
sudo /sbin/shutdown -h now
}}}


== Storyboard: Migrate VmWare VM to AWS AMI using SMS ==

[x] Login in to AWS console

[x] Navigate to "SMS Service"

[x] Click on "Server migration" sidebar section

[x] Click "Re-import server catalog" button

[x] Search for "ncspral20-aws-clone", select it and click "Create Replication Job" button

[x] on "Step 1: Select the servers" click "Next" button

[x] on "Step 2: Configure server-specific settings" click Next

[x] on "Step 3: Configure replication job settings" enter/select following in the fields
{{{
One-time migration
Description: ncspral20-aws-clone
}}}
click "Next" button

[x] on "Step 4: Review" verify all the configuration and click "Create" button

[x] on "Creation status" click "View replication jobs"

[x] Wait around of time mentioned in "SMS Migration time" section


== Storyboard: Copy migrated AMI to new AMI ==
PRE-CLONED AMI ID: ami-0342f416f10aa1bb5
CLONED AMI ID: ami-0d49addc3b4e94d63
Note: so it can be named better

[x] Navigate to AWS EC2 AMI and name the migrated AMI to
{{{
ncspral20-aws-clone
}}}

[x] Navigate to AWS EC2 Snapshots and name the 4 snapshots associate with the migrated AMI
{{{
9 GB   : ncspral20-aws-clone-boot
59 GB  : ncspral20-aws-clone-root
300 GB : ncspral20-aws-clone-fio
501 GB : ncspral20-aws-clone-cars-data
}}}

[x] Navigate to AWS EC2 AMI and copy ncspral20-aws-clone AMI enter/select following values into the field
{{{
Destination region: US East (North Virginia)
Name: ncspral20
Description: ncspral20
}}}
and click "Copy AMI"

Then wait for 5-15 min for AMI to copy, you will need to refresh the screen

[x] Name the newly copied AMI
{{{
Name: ncspral20
Description: ncspral20
}}}

[x] Navigate to AWS EC2 Snapshots and name the 4 snapshots associate with the newly copied AMI
{{{
9 GB   : ncspral20-ami-boot
59 GB  : ncspral20-ami-root
301 GB : ncspral20-ami-fio
501 GB : ncspral20-ami-cars-data
}}}

# skipping for now -- clean up after testing
[x] Navigate to AWS EC2 AMI and "Deregister" (delete) the "ncspral20-aws-clone" AMI

[x] Navigate to AWS EC2 Snapshots and delete the 4 snapshots with old AMI, all named ncspral20-aws-clone-*


== Storyboad: Create AWS EC2 Instance ==

[x] Navigate to AWS EC2 Instances and click "Launch Instance"

[x] On "Step 1: Choose an Amazon Machine Image (AMI)" step click "My AMIs" then select "ncspral20" AMI and click "Select"

[x] On "Step 2: Choose an Instance Type" select "r4.2xlarge" and click "Next: Configure Instance Details"

[x] On "Step 3: Configure Instance Details" select/enter following and click "Next: Add Storage"


{{{
Number of instances: 1
Network: vpc-0ddfa4a49d23118dc | Newcars-Prod-East
Subnet: subnet-0b6106485c4ade9bf | Cars.com-Newcars-Prod web us-east-1a
Auto-assign Public IP: Use subnet setting (Disable)
Placement group: ??? (need to ask adam)
CPU options: ??? (need to ask adam)
Enable termination protection: Protect against accidental termination
Tenancy: ??? (need to ask adam)
}}}

Network interfaces:
{{{
Primary IP: 172.28.240.11
}}}

[x] On "Step 4: Add Storage" select the following and click "Next: Add Tags"
{{{
Root Volume Type: ??? (talk to Adam) [this is actuall boot drive]
EBS Volume Type:  ??? (talk to Adam) [this is actually root drive]
EBS Volume Type:  ??? (talk to Adam) [this is actually fio drive with data]
EBS Volume Type:  ??? (talk to Adam) [this is actually cars drive with data]


Root Volume Type: Delete on termination, unchecked
EBS Volume Type:  Delete on termination, unchecked
EBS Volume Type:  Delete on termination, unchecked
EBS Volume Type:  Delete on termination, unchecked

}}}

[x] On "Step 5: Add Tags" and add following tags and click "next: Configure Security Group"
{{{
Key: Name
Value: ncspral20
Instances: checked
Volumes: checked
}}}

[x] On "Step 6: Configure Security Group" click "Select an existing security group" and click "Review and Launch"
{{{
Cars-SM FTP
Cars-SM HTTP
Cars-SM MySQL
Cars-SM NRPE
Cars-SM SSH
Cars-SM Unijob Client
}}}

[x] On "Step 7: Review Instance Launch" review all the settings and click "Launch"


[x] On "Select an existing key pair or create a new key pair" popup select "Proceed without a key pair", check the "acknowledge..." checkbox and click "Launch Instances"

[x] Navigate to AWS EC2 Network interfaces and Name the network interface for the new Instance
{{{
ncspral20
}}}

== Storyboard: Post first launch checks ==

[x]
{{{
ssh \
  -o UserKnownHostsFile=/dev/null \
  -o StrictHostKeyChecking=no \
  -o LogLevel=ERROR \
  dchun@172.28.240.11 \
;
}}}

[x] Run spot checks post reboot
{{{
ps auxw | grep anacron
ps auxw | grep crond
ps auxw | grep httpd
ps auxw | grep mysql
ps auxw | grep nbclient
ps auxw | grep nrpe
ps auxw | grep sendmail
ps auxw | grep UNIJOB
}}}



== Storyboard: Updated machine networking ==

[x] Force hostname for new Instance
{{{
sudo nano -w /etc/sysconfig/network
}}}
append
{{{
HOSTNAME=ncspral20.classifiedventures.com
}}}


[x] Update /etc/hosts to new IP
{{{
sudo nano -w /etc/hosts
}}}
comment out old ip
{{{
#172.20.89.46           ncspral20.classifiedventures.com ncspral20
}}}
add new ip
{{{
172.28.240.11           ncspral20.classifiedventures.com ncspral20
}}}


[x] Reboot the machine
{{{
sudo /sbin/reboot
}}}

[x] Check System Log for errors

[x] Check that the hostname has change
{{{
hostname
}}}

== Storyboard: Update Nagios ==
[x] Update IP for ncspral20 entry in Nagios to 172.28.240.11 (Michael)

== Storyboard: Route 53 DNS Updates ==

[x] update DNS record for ncspral20.srv.nchub.net to 172.28.240.11
    NOTE: PTR record is already created in Route 53 for this server

== Storyboard: Update /etc/hosts in legacy servers ==
[x] Refer to ncspral20_hosts.txt for storyboard

== Storyboard: BigIP Updates ==

[x] Refer to ncspral20_bigip.txt for storyboard

== Storyboard: Re-activate services ==
[x] Enable anacron service
{{{
sudo /sbin/chkconfig --list anacron
sudo /sbin/chkconfig --level 2345 anacron on
sudo /sbin/chkconfig --list anacron
}}}

[x] Enable crond service
{{{
sudo /sbin/chkconfig --list crond
sudo /sbin/chkconfig --level 2345 crond on
sudo /sbin/chkconfig --list crond
}}}

[x] Enable httpd service
{{{
sudo /sbin/chkconfig --list httpd
sudo /sbin/chkconfig --level 235 httpd on
sudo /sbin/chkconfig --list httpd
}}}

[x] Enable mysql service
{{{
sudo emacs /etc/rc.local
}}}

uncomment
{{{
/etc/init.d/mysqld start
}}}

[x] Enable Nagios NRPE client service
{{{
sudo /sbin/chkconfig --list nrpe
sudo /sbin/chkconfig --level 345 nrpe on
sudo /sbin/chkconfig --list nrpe
}}}

[x] Enable sendmail service
{{{
sudo /sbin/chkconfig --list sendmail
sudo /sbin/chkconfig --level 2345 sendmail on
sudo /sbin/chkconfig --list sendmail
}}}

[x] Enable unijob service
{{{
sudo /sbin/chkconfig --list unijob
sudo /sbin/chkconfig --level 2345 unijob on
sudo /sbin/chkconfig --list unijob
}}}


[x] Restart server
{{{
sudo /sbin/reboot
}}}

[x] Run spot checks post reboot -- most should be running
{{{
ps auxw | grep anacron
ps auxw | grep crond
ps auxw | grep httpd
ps auxw | grep mysql
ps auxw | grep nrpe
ps auxw | grep sendmail
ps auxw | grep UNIJOB
}}}
