= Background =

Role: Newcars INEK Stage and Production
Kernel: 2.6.18-416.el5 #1 SMP
Architecture: x86_64
Contains:

VmWare:
- CPU: 12
- RAM: 64
- Disks: 4
 * boot: 9 GB
   * swap: 7 GB
 * fio: 161 GB
 * disk1: 101 GB (TODO: check with MR)
 * root: 60 GB

SMS migration time:
- 4hr (estimate)

AWS EC2 Instance:
- type: r4.4xlarge (16 CPUs, 122 GB RAM)
- ENA: no (RHEL5 too old)


== Storyboard: Create clone of VmWare instance ==

[] Login to VmWare console

[] Navigate to ncspral21

[] Launch ncspral21 KVM console

[] SSH into the ncspral21

[] Reboot the machine to have it perform disk checks
{{{
sudo /sbin/reboot
}}}

[] Stop ncspral21 VmWare instance
{{{
sudo /sbin/shutdown -h now
}}}

[] Clone ncspral21 VmWare instance to ncspral21-aws-clone
  - place it in Cars-SM/AWS migration
  - Use Newcars Hosts
  - Use data store with sufficient amount of disk

[] Wait for clone task to complete and power up original vm

[] Disable all NIC interfaces on VmWare ncspral21-aws-clone instance

[] Start up ncspral21-aws-clone VmWare instance

[] Login to ncspral21-aws-clone via VmWare KVM console


== Storyboard: Remove Swap ==

[] Check swap is present
{{{
/sbin/swapon -s
}}}

[] Comment out this line from /etc/fstab
{{{
LABEL=SWAP-sda2     swap        swap        defaults        0 0
}}}

[] Reboot server
{{{
sudo /sbin/reboot
}}}

[] Check that swap partition is not present
{{{
/sbin/swapon -s
}}}


== Storyboard: Disable services ==
TODO check:
    memcached           0:off 1:off 2:on  3:on  4:on  5:on  6:off
    rsyncd              0:off 1:off 2:on  3:off 4:off 5:off 6:off

Note: done so two running clone do mess with the infrastructure

[] Disable anacron service
{{{
sudo /sbin/chkconfig --list anacron
sudo /sbin/chkconfig --level 2345 anacron off
sudo /sbin/chkconfig --list anacron | grep ":on"
}}}

[] Disable httpd service
{{{
sudo /sbin/chkconfig --list httpd
sudo /sbin/chkconfig --level 235 httpd off
sudo /sbin/chkconfig --list httpd | grep ":on"
}}}

[] Disable mysqld service
{{{
sudo /sbin/chkconfig --list mysqld
sudo /sbin/chkconfig --level 235 mysqld off
sudo /sbin/chkconfig --list mysqld | grep ":on"
}}}

[] Disable Netbackup client service
{{{
sudo /sbin/chkconfig --list nbclient
sudo /sbin/chkconfig --level 235 nbclient off
sudo /sbin/chkconfig --list nbclient | grep ":on"
}}}

[] Disable Nagios NRPE client service
{{{
sudo /sbin/chkconfig --list nrpe
sudo /sbin/chkconfig --level 345 nrpe off
sudo /sbin/chkconfig --list nrpe | grep ":on"
}}}

[] Disable sendmail service
{{{
sudo /sbin/chkconfig --list sendmail
sudo /sbin/chkconfig --level 2345 sendmail off
sudo /sbin/chkconfig --list sendmail | grep ":on"
}}}

[] Disable unijob service
{{{
sudo /sbin/chkconfig --list unijob
sudo /sbin/chkconfig --level 345 unijob off
sudo /sbin/chkconfig --list unijob | grep ":on"
}}}

TODO: check
  disable rsyncd
  disable memcached

[] Restart server
{{{
sudo /sbin/reboot
}}}

[] Run spot checks post reboot
TODO: check rsyncd & memcached
{{{
ps auxw | grep anacron
ps auxw | grep httpd
ps auxw | grep mysql
ps auxw | grep nbclient
ps auxw | grep nrpe
ps auxw | grep sendmail
ps auxw | grep -i unijob
}}}

[] Shutdown the clone machine
{{{
sudo /sbin/shutdown -h now
}}}


== Storyboard: Migrate VmWare VM to AWS AMI using SMS ==

[] Login in to AWS console

[] Navigate to "Server Migration Service"

[] Click on "Servers" sidebar section

[] Click "Re-import server catalog" button

[] Search for "ncspral21-aws-clone", select it and click "Create Replication Job" button

[] on "Step 1: Select the servers" click "Next" button

[] on "Step 2: Configure server-specific settings" click Next

[] on "Step 3: Configure replication job settings" enter/select following in the fields
{{{
One-time migration
Description: ncspral21-aws-clone
}}}
click "Next" button

[] on "Step 4: Review" verify all the configuration and click "Create" button

[] on "Creation status" click "View replication jobs"

[] Wait around of time mentioned in "SMS Migration time" section


== Storyboard: Copy migrated AMI to new AMI ==

Note: so it can be named better

[] Navigate to AWS EC2 AMI and name the migrated AMI to
{{{
ncspral21-aws-clone
}}}

[] Navigate to AWS EC2 Snapshots and name the 4 snapshots associate with the migrated AMI
{{{
9GB:   ncspral21-aws-clone-boot
60GB:  ncspral21-aws-clone-root
161GB: ncspral21-aws-clone-fio
101GB: ncspral21-aws-clone-disk1 (TODO: check with MR)
}}}

[] Navigate to AWS EC2 AMI and copy ncspral21-aws-clone AMI enter/select following values into the field
{{{
Destination region: US East (North Virginia)
Name: ncspral21
Description: ncspral21
}}}
and click "Copy AMI"

Then wait for 5-15 min for AMI to copy, you will need to refresh the screen

[] Name the newly copied AMI
{{{
Name: ncspral21
Description: ncspral21
}}}

[] Navigate to AWS EC2 Snapshots and name the 4 snapshots associate with the newly copied AMI
{{{
9GB:   ncspral21-ami-boot
60GB:  ncspral21-ami-root
161GB: ncspral21-ami-fio
101GB: ncspral21-ami-disk1 (TODO: check with MR)
}}}

[] Navigate to AWS EC2 AMI and "Deregister" (delete) the "ncspral21-aws-clone" AMI

[] Navigate to AWS EC2 Snapshots and delete the 4 snapshots with old AMI, all named ncspral21-aws-clone-*


== Storyboad: Create AWS EC2 Instance ==

[] Navigate to AWS EC2 Instances and click "Launch Instance"

[] On "Step 1: Choose an Amazon Machine Image (AMI)" step click "My AMIs" then select "ncspral21" AMI and click "Select"

[] On "Step 2: Choose an Instance Type" select "r4.4xlarge" and click "Next: Configure Instance Details"

[] On "Step 3: Configure Instance Details" select/enter following and click "Next: Add Storage"

todo: vpc, subnet, network interface ip settings will change for prod account

{{{
Number of instances: 1
Network: vpc-0003f0f3f28282042 | NewCars-NP-East
Subnet: subnet-0baf34a170551fefb | Cars.com-Newcars-NP web | us-east-1a
Auto-assign Public IP: Use subnet setting (Disable)
Placement group: ??? (need to ask adam)
CPU options: ??? (need to ask adam)
Enable termination protection: Protect against accidental termination
Tenancy: ??? (need to ask adam)
}}}

Network interfaces:
{{{
Primary IP: 172.28.224.12
}}}

[] On "Step 4: Add Storage" select the following and click "Next: Add Tags"
{{{
Root Volume Type: ??? (talk to Adam) [this is actually boot drive]
EBS Volume Type:  ??? (talk to Adam) [this is actually root drive]
EBS Volume Type:  ??? (talk to Adam) [this is actually fio drive with data]
EBS Volume Type:  ??? (talk to Adam) [this is actually disk1 drive with data]

Root Volume Type: Delete on termination, unchecked
EBS Volume Type:  Delete on termination, unchecked
EBS Volume Type:  Delete on termination, unchecked
EBS Volume Type:  Delete on termination, unchecked
}}}

[] On "Step 5: Add Tags" and add following tags and click "next: Configure Security Group"
{{{
Key: Name
Value: ncspral21
Instances: checked
Volumes: checked
}}}

[] On "Step 6: Configure Security Group" click "Select an existing security group" and click "Review and Launch"
TODO: need additional groups that allow access to multiple mysql ports on this machine
{{{
Cars-SM NRPE
Cars-SM Ping
Cars-SM SSH
}}}

[] On "Step 7: Review Instance Launch" review all the settings and click "Launch"


[] On "Select an existing key pair or create a new key pair" popup select "Proceed without a key pair", check the "acknowledge..." checkbox and click "Launch Instances"

[] Navigate to AWS EC2 Network interfaces and Name the network interface for the new Instance
{{{
ncspral21
}}}


== Storyboard: Post first launch checks ==

[]
{{{
ssh \
  -o UserKnownHostsFile=/dev/null \
  -o StrictHostKeyChecking=no \
  -o LogLevel=ERROR \
  jlee@172.28.224.12 \
;
}}}

[] Run spot checks post reboot
TODO: check rsyncd & memcached
{{{
ps auxw | grep anacron
ps auxw | grep httpd
ps auxw | grep mysql
ps auxw | grep nbclient
ps auxw | grep nrpe
ps auxw | grep sendmail
ps auxw | grep -i unijob
}}}

== Storyboard: Rename network interface on AWS ==

[] Navigate to "Network Interfaces on EC2 section of AWS

[] Rename appropriate network interface "ncspral21"

== Storyboard: Updated machine networking ==

[] Force hostname for new Instance
{{{
sudo nano -w /etc/sysconfig/network
}}}
append
{{{
HOSTNAME=ncspral21.classifiedventures.com
}}}


[] Update /etc/hosts to new IP
{{{
sudo nano -w /etc/hosts
}}}
remove old ip
{{{
172.20.89.47           ncspral21.classifiedventures.com ncspral21
}}}
add new ip
{{{
172.28.224.12          ncspral21.classifiedventures.com ncspral21
}}}

[] Reboot the machine
{{{
sudo /sbin/reboot
}}}

[] Check System Log for errors

[] Check hostname is correct
{{{
hostname
}}}

== Storyboard: Update timezone ==
[] Stop ntpd service
{{{
sudo systemctl stop ntpd
}}}

[] Edit /etc/sysconfig/clock
change
{{{
UTC=false
}}}
to
{{{
UTC=true
}}}

[] Run update
{{{
/usr/sbin/ntpdate pool.ntp.org
}}}

[] Start ntpd service again
{{{
sudo systemctl start ntpd
}}}

== Storyboard: Route 53 DNS Updates ==

[] Create PTR record for ncspral21

[] update DNS record for ncspral21.srv.nchub.net to 172.28.224.12


== Storyboard: BigIP Updates ==

[] Refer to ncspral21_bigip.txt


== Storyboard: Re-activate services ==
TODO: check rsyncd & memcached

[] Enable anacron service
{{{
sudo /sbin/chkconfig --list anacron
sudo /sbin/chkconfig --level 2345 anacron on
sudo /sbin/chkconfig --list anacron
}}}

[] Enable httpd service
{{{
sudo /sbin/chkconfig --list httpd
sudo /sbin/chkconfig --level 235 httpd on
sudo /sbin/chkconfig --list httpd
}}}

[] Enable mysqld service
{{{
sudo /sbin/chkconfig --list mysqld
sudo /sbin/chkconfig --level 235 mysqld on
sudo /sbin/chkconfig --list mysqld
}}}

[] Enable Netbackup client service
{{{
sudo /sbin/chkconfig --list nbclient
sudo /sbin/chkconfig --level 235 nbclient on
sudo /sbin/chkconfig --list nbclient
}}}

[] Enable Nagios NRPE client service
{{{
sudo /sbin/chkconfig --list nrpe
sudo /sbin/chkconfig --level 345 nrpe on
sudo /sbin/chkconfig --list nrpe
}}}

[] Enable sendmail service
{{{
sudo /sbin/chkconfig --list sendmail
sudo /sbin/chkconfig --level 2345 sendmail on
sudo /sbin/chkconfig --list sendmail
}}}

[] Enable unijob service
{{{
sudo /sbin/chkconfig --list unijob
sudo /sbin/chkconfig --level 345 unijob on
sudo /sbin/chkconfig --list unijob
}}}

[] Restart server
{{{
sudo /sbin/reboot
}}}
