= Background =


Role: Replicated databases
Kernel: 2.6.18-416.el5 #1 SMP
Architecture: x86_64
Contains: mysqld_multi, /etc/init.d/mysqld is run via /etc/rc.local since not a real service

VmWare:
- CPU: 4
- RAM: 32
- Disks: 3
 * boot: 104 MB
 * root + swap: 71 GB
    * swap: 35.5 GB
 * fio: 600 GB

SMS migration time:
 - 5hr20min (estimate)

AWS EC2 Instance:
- type: r4.xlarge or r4.2xlarge (4 cpu, 32 ram [+35.5GB for swap])
- ENA: no (RHEL5 too old)


== Storyboard: Create clone of VmWare instance ==

[x] Login to VmWare console

[x] Navigate to ncspral23

[x] Launch ncspral23 KVM console

[x] SSH into the ncspral23

[x] Reboot the machine to have it perform disk checks
{{{
sudo /sbin/reboot
}}}

[x] Stop ncspral23 VmWare instance
{{{
sudo /sbin/shutdown -h now
}}}

[x] Clone ncspral23 VmWare instance to ncspral23-aws-clone
  - place it in Cars-SM/AWS migration
  - Use Newcars Hosts
  - Use data store with sufficient amount of disk

[x] Wait for clone task to complete and power up original vm

[x] Disable all NIC interfaces on VmWare ncspral23-aws-clone instance

[x] Start up ncspral23-aws-clone VmWare instance

[x] Login to ncspral23-aws-clone via VmWare KVM console


== Storyboard: Remove Swap ==

[x] Check swap is present
{{{
/sbin/swapon -s
}}}

[x] Comment out this line from /etc/fstab
{{{
/dev/VolGroup00/LogVol01        swap        swap        defaults        0 0
}}}

[x] Reboot server
{{{
sudo /sbin/reboot
}}}

[x] Check that swap partition is not present
{{{
/sbin/swapon -s
}}}


== Storyboard: Disable services ==

Note: done so two running clone do mess with the infrastructure

[x] Disable anacron service
{{{
sudo /sbin/chkconfig --list anacron
sudo /sbin/chkconfig --level 245 anacron off
sudo /sbin/chkconfig --list anacron | grep ":on"
}}}

[x] Disable atd service
{{{
sudo /sbin/chkconfig --list atd
sudo /sbin/chkconfig --level 45 atd off
sudo /sbin/chkconfig --list atd | grep ":on"
}}}

[x] Disable crond service
{{{
sudo /sbin/chkconfig --list crond
sudo /sbin/chkconfig --level 2345 crond off
sudo /sbin/chkconfig --list crond | grep ":on"
}}}

[x] Disable mysql service
{{{
sudo emacs /etc/rc.local
}}}

comment out
{{{
/etc/init.d/mysqld start
}}}

[x] Disable Netbackup client service
{{{
sudo /sbin/chkconfig --list nbclient
sudo /sbin/chkconfig --level 235 nbclient off
sudo /sbin/chkconfig --list nbclient | grep ":on"
}}}

[x] Disable Nagios NRPE client service
{{{
sudo /sbin/chkconfig --list nrpe
sudo /sbin/chkconfig --level 345 nrpe off
sudo /sbin/chkconfig --list nrpe | grep ":on"
}}}

[x] Disable sendmail service
{{{
sudo /sbin/chkconfig --list sendmail
sudo /sbin/chkconfig --level 2345 sendmail off
sudo /sbin/chkconfig --list sendmail | grep ":on"
}}}

[x] Restart server
{{{
sudo /sbin/reboot
}}}

[x] Run spot checks post reboot
{{{
ps auxw | grep anacron
ps auxw | grep atd
ps auxw | grep crond
ps auxw | grep mysql
ps auxw | grep nbclient
ps auxw | grep nrpe
ps auxw | grep sendmail
}}}

[x] Shutdown the clone machine
{{{
sudo /sbin/shutdown -h now
}}}


== Storyboard: Migrate VmWare VM to AWS AMI using SMS ==

[x] Login in to AWS console

[x] Navigate to "Server Migration Service"

[x] Click on "Servers" sidebar section

[x] Click "Re-import server catalog" button

[x] Search for "ncspral23-aws-clone", select it and click "Create Replication Job" button

[x] on "Step 1: Select the servers" click "Next" button

[x] on "Step 2: Configure server-specific settings" click Next

[x] on "Step 3: Configure replication job settings" enter/select following in the fields
{{{
One-time migration
Description: ncspral23-aws-clone
}}}
click "Next" button

[x] on "Step 4: Review" verify all the configuration and click "Create" button

[x] on "Creation status" click "View replication jobs"

[x] Wait around of time mentioned in "SMS Migration time" section


== Storyboard: Copy migrated AMI to new AMI ==

Note: so it can be named better

[x] Navigate to AWS EC2 AMI and name the migrated AMI to
{{{
ncspral23-aws-clone
}}}

[x] Navigate to AWS EC2 Snapshots and name the 3 snapshots associate with the migrated AMI
{{{
1GB:   ncspral23-aws-clone-boot
67GB:  ncspral23-aws-clone-root
601GB: ncspral23-aws-clone-fio
}}}

[x] Navigate to AWS EC2 AMI and copy ncspral23-aws-clone AMI enter/select following values into the field
{{{
Destination region: US East (North Virginia)
Name: ncspral23
Description: ncspral23
}}}
and click "Copy AMI"

Then wait for 5-15 min for AMI to copy, you will need to refresh the screen

[x] Name the newly copied AMI
{{{
Name: ncspral23
Description: ncspral23
}}}

[x] Navigate to AWS EC2 Snapshots and name the 3 snapshots associate with the newly copied AMI
{{{
1GB:   ncspral23-ami-boot
67GB:  ncspral23-ami-root
601GB: ncspral23-ami-fio
}}}

[x] Navigate to AWS EC2 AMI and "Deregister" (delete) the "ncspral23-aws-clone" AMI

[x] Navigate to AWS EC2 Snapshots and delete the 3 snapshots with old AMI, all named ncspral23-aws-clone-*


== Storyboad: Create AWS EC2 Instance ==

[x] Navigate to AWS EC2 Instances and click "Launch Instance"

[x] On "Step 1: Choose an Amazon Machine Image (AMI)" step click "My AMIs" then select "ncspral23" AMI and click "Select"

[x] On "Step 2: Choose an Instance Type" select "r4.xlarge" and click "Next: Configure Instance Details"

[x] On "Step 3: Configure Instance Details" select/enter following and click "Next: Add Storage"

todo: vpc, subnet, network interface ip settings will change for prod account

{{{
Number of instances: 1
Network: vpc-0003f0f3f28282042 | NewCars-NP-East
Subnet: subnet-0baf34a170551fefb | Cars.com-Newcars-NP web | us-east-1a
Auto-assign Public IP: Use subnet setting (Disable)
Placement group: ??? (need to ask adam)
CPU options: ??? (need to ask adam)
Enable termination protection: Protect against accidental termination
Tenancy: ??? (need to ask adam)
}}}

Network interfaces:
{{{
Primary IP: 172.28.240.13
}}}

[x] On "Step 4: Add Storage" select the following and click "Next: Add Tags"
{{{
Root Volume Type: ??? (talk to Adam) [this is actually boot drive]
EBS Volume Type:  ??? (talk to Adam) [this is actually root drive]
EBS Volume Type:  ??? (talk to Adam) [this is actually fio drive with data]

Root Volume Type: Delete on termination, unchecked
EBS Volume Type:  Delete on termination, unchecked
EBS Volume Type:  Delete on termination, unchecked
}}}

[x] On "Step 5: Add Tags" and add following tags and click "next: Configure Security Group"
{{{
Key: Name
Value: ncspral23
Instances: checked
Volumes: checked
}}}

[x] On "Step 6: Configure Security Group" click "Select an existing security group" and click "Review and Launch"
TODO: need additional groups that allow access to multiple mysql ports on this machine
{{{
Cars-SM ncspral23/ncspral24 MySQL
Cars-SM NRPE
Cars-SM Ping
Cars-SM SSH
}}}

[x] On "Step 7: Review Instance Launch" review all the settings and click "Launch"


[x] On "Select an existing key pair or create a new key pair" popup select "Proceed without a key pair", check the "acknowledge..." checkbox and click "Launch Instances"

[x] Navigatew to AWS EC2 Network interfaces and Name the network interface for the new Instance
{{{
ncspral23
}}}

== Storyboard: Post first launch checks ==

[x]
{{{
ssh \
  -o UserKnownHostsFile=/dev/null \
  -o StrictHostKeyChecking=no \
  -o LogLevel=ERROR \
  dchun@172.28.240.13 \
;
}}}

[x] Run spot checks post reboot
{{{
ps auxw | grep anacron
ps auxw | grep atd
ps auxw | grep crond
ps auxw | grep mysql
ps auxw | grep nrpe
ps auxw | grep sendmail
}}}



== Storyboard: Updated machine networking ==

[x] Force hostname for new Instance
{{{
sudo nano -w /etc/sysconfig/network
}}}
append
{{{
HOSTNAME=ncspral23.classifiedventures.com
}}}


[x] Update /etc/hosts to new IP
{{{
sudo nano -w /etc/hosts
}}}
comment out old ip
{{{
#172.20.89.53           ncspral23.classifiedventures.com ncspral23
}}}
add new ip
{{{
172.28.240.13           ncspral23.classifiedventures.com ncspral23
}}}

[x] Reboot the machine
{{{
sudo /sbin/reboot
}}}

[x] Check System Log for errors

[x] Check hostname is correct
{{{
hostname
}}}

== Storyboard: Route 53 DNS Updates ==

[x] Create PTR record for ncspral23

[x] update DNS record for ncspral23.srv.nchub.net to 172.28.240.13

== Storyboard: BigIP Updates ==

[x] Refer to ncspral23_bigip.txt


== Storyboard: Re-activate services ==

[x] Enable anacron service
{{{
sudo /sbin/chkconfig --list anacron
sudo /sbin/chkconfig --level 245 anacron on
sudo /sbin/chkconfig --list anacron | grep ":on"
}}}

[x] Enable atd service
{{{
sudo /sbin/chkconfig --list atd
sudo /sbin/chkconfig --level 45 atd on
sudo /sbin/chkconfig --list atd | grep ":on"
}}}

[x] Enable crond service
{{{
sudo /sbin/chkconfig --list crond
sudo /sbin/chkconfig --level 2345 crond on
sudo /sbin/chkconfig --list crond | grep ":on"
}}}

[x] Enable mysql service
{{{
sudo emacs /etc/rc.local
}}}

uncomment
{{{
/etc/init.d/mysqld start
}}}

[x] Enable Nagios NRPE client service
{{{
sudo /sbin/chkconfig --list nrpe
sudo /sbin/chkconfig --level 345 nrpe on
sudo /sbin/chkconfig --list nrpe | grep ":on"
}}}

[x] Enable sendmail service
{{{
sudo /sbin/chkconfig --list sendmail
sudo /sbin/chkconfig --level 2345 sendmail on
sudo /sbin/chkconfig --list sendmail | grep ":on"
}}}

[x] Restart server
{{{
sudo /sbin/reboot
}}}
